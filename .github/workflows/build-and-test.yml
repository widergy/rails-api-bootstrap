name: Build & Test

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - master
      - /release-.*/

jobs:
  build_and_test:
    runs-on: ubuntu-20.04

    # Set enviroment variables
    env:
      RAILS_ENV: test
      PGHOST: 127.0.0.1
      DATABASE_URL: postgres://rails-api-bootstrap@127.0.0.1:5432/rails-api-bootstrap_test
      DB_USERNAME: rails-api-bootstrap
      DB_PASSWORD: ""
      REDIS_HOST: redis
      AWS_ACCESS_KEY_ID: ${{ secrets.WIDERGYDEV_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.WIDERGYDEV_AWS_SECRET_ACCESS_KEY }}

    # Dependency Services
    services:
      postgres: 
        image: circleci/postgres:9.5-alpine
        env:
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_DB: rails-api-bootstrap_test
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
        - 5432:5432
        # Add a health check
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7.2
        ports:
        - 6379:6379
        # Add a health check
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: .ruby-version

    # Show bundler version
    - name: Which bundler?
      run: bundle -v

    # Restore bundle cache
    - name: Cache Ruby dependencies
      uses: actions/cache@v3
      id: bundler-cache
      with:
        path: vendor/bundle
        # First it will look for the exact key, if there isn't a cache hit, it will look into the restore-keys
        key: rails-api-bootstrap-bundle-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: rails-api-bootstrap-bundle-

    # The installed dependencies will be cached when the job succeeds
    - name: Bundle install dependencies
      if: steps.cache-primes.outputs.cache-hit != 'true'
      run: bundle install --without development --jobs=4 --retry=3 --path vendor/bundle

    # Show rails version
    - name: Which rails?
      run: bundle info rails

    # Setup database
    - name: Load DB schema
      run: |
        bundle exec rake db:create
        bundle exec rake db:schema:load --trace
 
    # Rubocop
    - name: Run Rubocop
      run: bundle exec rubocop app spec

    # Tests
    - name: Run Tests
      run: bundle exec rspec
